{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","components/App/App.js","index.js"],"names":["module","exports","ContactForm","state","name","number","nameInputId","uuidv4","numberInputId","handleChange","e","target","value","setState","handleSubmit","preventDefault","contact","id","props","onSubmit","reset","className","s","contact__form","input__form","this","htmlFor","input__title","type","pattern","title","required","input__name","onChange","input__number","btn__add","Component","Filter","filter","filter__container","filter__title","filter__input","ContactList","contacts","deleteContact","map","contact__item","item","onClick__btn","onClick","App","dataContacts","formSubmitHandler","data","some","elem","toLowerCase","alert","handleFilterChange","handleFilterContact","filterContact","includes","delContact","prevState","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","console","log","getContact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db63416c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact__form\":\"ContactForm_contact__form__EsFOx\",\"input__number\":\"ContactForm_input__number__5vJmE\",\"input__name\":\"ContactForm_input__name__2ovuN\",\"input__title\":\"ContactForm_input__title__3lRHV\",\"btn__add\":\"ContactForm_btn__add__3rVy7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactList_item__1bT_E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter__container\":\"Filter_filter__container__1NJjO\",\"filter__input\":\"Filter_filter__input__20JXL\"};","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport s from './ContactForm.module.css';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameInputId = uuidv4();\n  numberInputId = uuidv4();\n\n  handleChange = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    const { name, number } = this.state;\n    e.preventDefault();\n\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n\n    this.props.onSubmit(contact);\n    this.reset();\n  };\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <div className={s.contact__form}>\n        <form className={s.input__form} onSubmit={this.handleSubmit}>\n          <label htmlFor={this.nameInputId}>\n            <span className={s.input__title}>Name</span>\n            <input\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n              className={s.input__name}\n              value={this.state.name}\n              onChange={this.handleChange}\n              id={this.nameInputId}\n            />\n          </label>\n          <label htmlFor={this.numberInputId}>\n            <span className={s.input__title}>Number</span>\n            <input\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n              className={s.input__number}\n              value={this.state.number}\n              onChange={this.handleChange}\n              id={this.numberInputId}\n            />\n\n            <button type=\"submit\" className={s.btn__add}>\n              Add contact\n            </button>\n          </label>\n        </form>\n      </div>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.number,\n  handleChange: PropTypes.func,\n  handleSubmit: PropTypes.func,\n  nameInputId: PropTypes.string,\n  numberInputId: PropTypes.string,\n};\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nconst Filter = ({ filter, onChange }) => {\n  return (\n    <div className={s.filter__container}>\n      <label className={s.filter__title}>\n        Find contacts by name\n        <input\n          className={s.filter__input}\n          type=\"text\"\n          value={filter}\n          name=\"name\"\n          onChange={onChange}\n        />\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import s from './ContactList.module.css';\nimport PropTypes from 'prop-types';\n\nconst ContactList = ({ contacts, deleteContact }) => {\n  return (\n    <div>\n      <ul className=\"contact-list\">\n        {contacts.map(({ name, number, id }) => (\n          <li key={id} className={s.contact__item}>\n            <p className={s.item}>{name}:</p>\n            <p className={s.item}>{number}</p>\n            <button\n              key={id}\n              type=\"button\"\n              className={s.onClick__btn}\n              onClick={() => deleteContact(id)}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    }),\n  ),\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import { Component } from 'react';\nimport './App.css';\nimport ContactForm from '../ContactForm/ContactForm';\nimport Filter from '../Filter/Filter';\nimport ContactList from '../ContactList/ContactList';\nimport dataContacts from '../../FileJson/FileJson.json';\n\nclass App extends Component {\n  state = {\n    contacts: dataContacts,\n    filter: '',\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  componentWillUnmount() {\n    console.log('unmount');\n  }\n\n  formSubmitHandler = data => {\n    const allReadyPresentContact = this.state.contacts.some(\n      elem => elem.name.toLowerCase() === data.name.toLowerCase(),\n    );\n\n    if (allReadyPresentContact) {\n      return alert(`${data.name} is already in contacts.`);\n    }\n\n    this.setState(({ contacts }) => ({\n      contacts: [data, ...contacts],\n    }));\n  };\n\n  handleFilterChange = e => {\n    this.setState({ filter: e.target.value });\n  };\n\n  handleFilterContact = () => {\n    const { filter, contacts } = this.state;\n    const filterContact = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterContact),\n    );\n  };\n\n  delContact = id => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== id),\n    }));\n  };\n\n  render() {\n    console.log('APP componentDidMount');\n    const { filter } = this.state;\n    const { formSubmitHandler, handleFilterChange, delContact } = this;\n    const getContact = this.handleFilterContact();\n\n    return (\n      <div className=\"Container\">\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={formSubmitHandler} />\n        <h2>Contacts</h2>\n        <Filter filter={filter} onChange={handleFilterChange} />\n        <ContactList contacts={getContact} deleteContact={delContact} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}