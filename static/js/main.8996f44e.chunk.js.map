{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","components/App/App.js","redux/store.js","index.js","components/Filter/Filter.module.css","components/ContactList/ContactList.module.css"],"names":["module","exports","ContactForm","onSubmit","useState","name","setName","number","setNumber","handleChange","e","target","value","reset","className","s","contact__form","input__form","preventDefault","contact","id","uuidv4","input__title","type","pattern","title","required","input__name","onChange","input__number","btn__add","ContactList","contacts","deleteContact","map","contact__item","item","onClick__btn","onClick","App","dataContacts","setContacts","filter","setFilter","useEffect","parsedContacts","JSON","parse","localStorage","getItem","setItem","stringify","data","some","elem","toLowerCase","alert","Filter","filterContact","includes","handleFilterContact","initialState","store","createStore","state","payload","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8996f44e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact__form\":\"ContactForm_contact__form__EsFOx\",\"input__number\":\"ContactForm_input__number__5vJmE\",\"input__name\":\"ContactForm_input__name__2ovuN\",\"input__title\":\"ContactForm_input__title__3lRHV\",\"btn__add\":\"ContactForm_btn__add__3rVy7\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport s from './ContactForm.module.css';\n\nexport default function ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n    onSubmit(contact);\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div className={s.contact__form}>\n      <form className={s.input__form} onSubmit={handleSubmit}>\n        <label>\n          <span className={s.input__title}>Name</span>\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            className={s.input__name}\n            value={name}\n            onChange={handleChange}\n          />\n        </label>\n        <label>\n          <span className={s.input__title}>Number</span>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            className={s.input__number}\n            value={number}\n            onChange={handleChange}\n          />\n        </label>\n        <button type=\"submit\" className={s.btn__add}>\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.number,\n  handleChange: PropTypes.func,\n  handleSubmit: PropTypes.func,\n  nameInputId: PropTypes.string,\n  numberInputId: PropTypes.string,\n};\n","import s from './Filter.module.css';\nimport PropTypes from 'prop-types';\n\nconst ContactList = ({ contacts = [], deleteContact }) => {\n  return (\n    <div>\n      <ul className=\"contact-list\">\n        {contacts.map(({ name, number, id }) => (\n          <li key={id} className={s.contact__item}>\n            <p className={s.item}>{name}:</p>\n            <p className={s.item}>{number}</p>\n            <button\n              key={id}\n              type=\"button\"\n              className={s.onClick__btn}\n              onClick={() => deleteContact(id)}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    }),\n  ),\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import s from './ContactList.module.css';\nimport PropTypes from 'prop-types';\n\nconst ContactList = ({ contacts, deleteContact }) => {\n  return (\n    <div>\n      <ul className=\"contact-list\">\n        {contacts.map(({ name, number, id }) => (\n          <li key={id} className={s.contact__item}>\n            <p className={s.item}>{name}:</p>\n            <p className={s.item}>{number}</p>\n            <button\n              key={id}\n              type=\"button\"\n              className={s.onClick__btn}\n              onClick={() => deleteContact(id)}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    }),\n  ),\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import { useState, useEffect } from 'react';\nimport './App.css';\nimport ContactForm from '../ContactForm/ContactForm';\nimport Filter from '../Filter/Filter';\nimport ContactList from '../ContactList/ContactList';\nimport dataContacts from '../../fileJson/contacts.json';\n\nexport default function App() {\n  const [contacts, setContacts] = useState(dataContacts);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    const parsedContacts = JSON.parse(localStorage.getItem('contacts'));\n    if (parsedContacts) {\n      setContacts(parsedContacts);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const formSubmitHandler = data => {\n    const allReadyPresentContact = contacts.some(\n      elem => elem.name.toLowerCase() === data.name.toLowerCase(),\n    );\n\n    if (allReadyPresentContact) {\n      return alert(`${data.name} is already in contacts.`);\n    }\n\n    setContacts([...contacts, data]);\n  };\n\n  const handleFilterChange = e => {\n    setFilter(e.target.value);\n  };\n\n  const handleFilterContact = () => {\n    const filterContact = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterContact),\n    );\n  };\n\n  const delContact = id => {\n    setContacts(contacts.filter(contact => contact.id !== id));\n  };\n\n  return (\n    <div className=\"Container\">\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={formSubmitHandler} />\n      <h2>Contacts</h2>\n      <Filter filter={filter} onChange={handleFilterChange} />\n      <ContactList\n        contacts={handleFilterContact()}\n        deleteContact={delContact}\n      />\n    </div>\n  );\n}\n","import { createStore } from 'redux';\r\nimport dataContacts from '../fileJson/contacts.json';\r\n\r\nconst initialState = { contacts: dataContacts };\r\n\r\nconst reducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case 'input/Add':\r\n      //   return { contacts: state.contacts + payload };\r\n      return { contacts: [state, ...payload] };\r\n\r\n    case 'input/Delete':\r\n      return {\r\n        contacts: state.contacts.filter(contact => contact.id !== payload),\r\n        // contacts: state.contacts - payload,\r\n      };\r\n\r\n    // case 'filter':\r\n    //     const filterContact = filter.toLowerCase();\r\n    //     return {state.filter(contact =>\r\n    //         contact.name.toLowerCase().includes(filterContact),\r\n    //       )};\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './components/App/App';\nimport store from './redux/store';\n// import { addContact, removeContact, filterContact } from './redux/actions';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter__container\":\"Filter_filter__container__1NJjO\",\"filter__input\":\"Filter_filter__input__20JXL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactList_item__1bT_E\"};"],"sourceRoot":""}