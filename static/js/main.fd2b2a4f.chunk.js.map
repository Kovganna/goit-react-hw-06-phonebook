{"version":3,"sources":["components/Filter/Filter.module.css","redux/contacts/actions.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","redux/contacts/selectors.js","components/ContactList/ContactList.js","components/App/App.js","redux/contacts/reducers.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css"],"names":["module","exports","addContact","createAction","removeContact","filterContacts","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","handleChange","e","target","value","reset","className","s","contact__form","input__form","onSubmit","preventDefault","contact","id","uuidv4","input__title","type","pattern","title","required","input__name","onChange","input__number","btn__add","Filter","filter","filter__container","filter__title","filter__input","getContacts","state","contacts","ContactList","useSelector","map","contact__item","item","onClick__btn","onClick","App","dataContacts","setContacts","useEffect","parsedContacts","JSON","parse","localStorage","getItem","setItem","stringify","data","some","elem","toLowerCase","alert","filterContact","includes","handleFilterContact","deleteContact","initState","contactList","createReducer","payload","contactFilter","_","persistConfig","key","version","storage","blacklist","contactReducer","combineReducers","persistedContactReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"sZACAA,EAAOC,QAAU,CAAC,kBAAoB,kCAAkC,cAAgB,gC,2KCC3EC,EAAaC,YAAa,eAC1BC,EAAgBD,YAAa,kBAC7BE,EAAiBF,YAAa,kB,uBCuG5BG,MAnGf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEMC,EAAWC,cAEXC,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MACd,OAAQT,GACN,IAAK,OACHC,EAAQQ,GACR,MACF,IAAK,SACHN,EAAUM,GACV,MAEF,QACE,SAmBAC,EAAQ,WACZT,EAAQ,IACRE,EAAU,KAGZ,OACE,qBAAKQ,UAAWC,IAAEC,cAAlB,SACE,uBAAMF,UAAWC,IAAEE,YAAaC,SAtBf,SAAAR,GACnBA,EAAES,iBACF,IAAMC,EAAU,CACdC,GAAIC,cACJnB,OACAE,UAMFE,EAASV,EAAWuB,IACpBP,KAUE,UACE,kCACE,sBAAMC,UAAWC,IAAEQ,aAAnB,kBACA,uBACEC,KAAK,OACLrB,KAAK,OACLsB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRb,UAAWC,IAAEa,YACbhB,MAAOT,EACP0B,SAAUpB,OAGd,kCACE,sBAAMK,UAAWC,IAAEQ,aAAnB,oBACA,uBACEC,KAAK,MACLrB,KAAK,SACLsB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRb,UAAWC,IAAEe,cACblB,MAAOP,EACPwB,SAAUpB,OAGd,wBAAQe,KAAK,SAASV,UAAWC,IAAEgB,SAAnC,+B,iBCrDOC,EAtBA,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,OAAQJ,EAAe,EAAfA,SACxB,OACE,qBAAKf,UAAWC,IAAEmB,kBAAlB,SACE,wBAAOpB,UAAWC,IAAEoB,cAApB,kCAEE,uBACErB,UAAWC,IAAEqB,cACbZ,KAAK,OACLZ,MAAOqB,EACP9B,KAAK,OACL0B,SAAUA,U,gBCbPQ,EAAc,SAAAC,GAAK,OAAIA,EAAMC,UCgC3BC,EAzBK,WAClB,IAAMD,EAAWE,YAAYJ,GACvB9B,EAAWC,cAEjB,OACE,8BACE,oBAAIM,UAAU,eAAd,SACGyB,EAASG,KAAI,gBAAGvC,EAAH,EAAGA,KAAME,EAAT,EAASA,OAAQgB,EAAjB,EAAiBA,GAAjB,OACZ,qBAAaP,UAAWC,IAAE4B,cAA1B,UACE,oBAAG7B,UAAWC,IAAE6B,KAAhB,UAAuBzC,EAAvB,OACA,mBAAGW,UAAWC,IAAE6B,KAAhB,SAAuBvC,IACvB,wBAEEmB,KAAK,SACLV,UAAWC,IAAE8B,aACbC,QAAS,kBAAMvC,EAASR,EAAcsB,KAJxC,mBACOA,KAJAA,W,QCLJ,SAAS0B,IACtB,MAAgC7C,mBAAS8C,GAAzC,mBAAOT,EAAP,KAAiBU,EAAjB,KACA,EAA4B/C,mBAAS,IAArC,mBAAO+B,EAAP,KAGM1B,GAHN,KAGiBC,eAIjB0C,qBAAU,WACR,IAAMC,EAAiBC,KAAKC,MAAMC,aAAaC,QAAQ,aACnDJ,GACFF,EAAYE,KAEb,IAEHD,qBAAU,WACRI,aAAaE,QAAQ,WAAYJ,KAAKK,UAAUlB,MAC/C,CAACA,IA+BJ,OACE,sBAAKzB,UAAU,YAAf,UACE,2CACA,cAAC,EAAD,CAAaI,SAhCS,SAAAwC,GAKxB,GAJ+BnB,EAASoB,MACtC,SAAAC,GAAI,OAAIA,EAAKzD,KAAK0D,gBAAkBH,EAAKvD,KAAK0D,iBAI9C,OAAOC,MAAM,GAAD,OAAIJ,EAAKvD,KAAT,6BAGd8C,EAAY,GAAD,mBAAKV,GAAL,CAAemB,QAwBxB,0CACA,cAAC,EAAD,CAAQzB,OAAQA,EAAQJ,SAtBD,SAAAnB,GAEzBH,EAASP,EAAeU,EAAEC,OAAOC,WAqB/B,cAAC,EAAD,CACE2B,SAnBsB,WAC1B,IAAMwB,EAAgB9B,EAAO4B,cAE7B,OAAOtB,EAASN,QAAO,SAAAb,GAAO,OAC5BA,EAAQjB,KAAK0D,cAAcG,SAASD,MAexBE,GACVC,cAZa,SAAA7C,GACjB4B,EAAYV,EAASN,QAAO,SAAAb,GAAO,OAAIA,EAAQC,KAAOA,Y,qBCpDpD8C,EAAY,CAAC,CAAE9C,GAAI,GAAI2B,iBAmBhBoB,EAAcC,YAAcF,GAAD,mBACrCtE,GAAa,SAACyC,EAAD,OAAUgC,EAAV,EAAUA,QAAV,4BAA4BhC,GAA5B,CAAmCgC,OADX,cAErCvE,GAAgB,SAACuC,EAAD,OAAUgC,EAAV,EAAUA,QAAV,OACfhC,EAAML,QAAO,SAAAb,GAAO,OAAIA,EAAQC,KAAOiD,QAHH,IAM3BC,EAAgBF,YAAc,GAAD,eACvCrE,GAAiB,SAACwE,EAAD,YAAMF,Y,gCCTpBG,EAAgB,CACpBC,IAAK,WACLC,QAAS,EACTC,Q,OAAAA,EACAC,UAAW,CAAC,WAGRC,EAAiBC,YAAgB,CACrCxC,SAAU6B,EACVnC,OAAQsC,IAEJS,EAA0BC,YAAeR,EAAeK,GAEjDI,EAAQC,YAAe,CAClCC,QAASJ,EACTK,WAAY,SAAAC,GAAoB,OAC9BA,EAAqB,CACnBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,QAE3DC,OAAOC,QAGDC,EAAYC,YAAahB,G,QCjCtCiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAaJ,UAAWA,EAAWK,QAAS,KAA5C,SACE,cAAC,IAAD,CAAUpB,MAAOA,EAAjB,SACE,cAAC,EAAD,UAINqB,SAASC,eAAe,U,kBClB1B7G,EAAOC,QAAU,CAAC,cAAgB,mCAAmC,cAAgB,mCAAmC,YAAc,iCAAiC,aAAe,kCAAkC,SAAW,gC,kBCAnOD,EAAOC,QAAU,CAAC,KAAO,6B","file":"static/js/main.fd2b2a4f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter__container\":\"Filter_filter__container__1NJjO\",\"filter__input\":\"Filter_filter__input__20JXL\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const addContact = createAction('contact/add');\nexport const removeContact = createAction('contact/delete');\nexport const filterContacts = createAction('contact/filter');\n\n// export const addContact = contact => ({\n//   type: 'contact/add',\n//   payload: contact,\n// });\n\n// export const removeContact = id => ({\n//   type: 'contact/delete',\n//   payload: { id },\n// });\n\n// export const filterContacts = value => ({\n//   type: 'contact/filter',\n//   payload: value,\n// })\n","import { useState } from 'react';\n// import { connect } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport { addContact } from '../../redux/contacts/actions';\nimport s from './ContactForm.module.css';\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n\n    // onSubmit(contact);\n\n    // onAdd(contact); //диспатчим contact в redux\n    dispatch(addContact(contact));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div className={s.contact__form}>\n      <form className={s.input__form} onSubmit={handleSubmit}>\n        <label>\n          <span className={s.input__title}>Name</span>\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            className={s.input__name}\n            value={name}\n            onChange={handleChange}\n          />\n        </label>\n        <label>\n          <span className={s.input__title}>Number</span>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            className={s.input__number}\n            value={number}\n            onChange={handleChange}\n          />\n        </label>\n        <button type=\"submit\" className={s.btn__add}>\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.number,\n  handleChange: PropTypes.func,\n  handleSubmit: PropTypes.func,\n  nameInputId: PropTypes.string,\n  numberInputId: PropTypes.string,\n};\n\n// const mapStateToProps = state => {\n//   return {\n//     contactsList: state.contacts,\n//   };\n// };\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     onnAdd: contact => dispatch(addContact(contact)),\n//   };\n// };\n\n// export default connect(null, mapDispatchToProps)(ContactForm);\nexport default ContactForm;\n","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nconst Filter = ({ filter, onChange }) => {\n  return (\n    <div className={s.filter__container}>\n      <label className={s.filter__title}>\n        Find contacts by name\n        <input\n          className={s.filter__input}\n          type=\"text\"\n          value={filter}\n          name=\"name\"\n          onChange={onChange}\n        />\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","export const getContacts = state => state.contacts;\r\n","import { removeContact } from '../../redux/contacts/actions';\nimport s from './ContactList.module.css';\n// import PropTypes from 'prop-types';\nimport { getContacts } from '../../redux/contacts/selectors';\n// import { connect } from 'react-redux';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <ul className=\"contact-list\">\n        {contacts.map(({ name, number, id }) => (\n          <li key={id} className={s.contact__item}>\n            <p className={s.item}>{name}:</p>\n            <p className={s.item}>{number}</p>\n            <button\n              key={id}\n              type=\"button\"\n              className={s.onClick__btn}\n              onClick={() => dispatch(removeContact(id))}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\nexport default ContactList;\n\n// function ContactList({ contacts, deleteContact }) {\n//   return (\n//     <div>\n//       <ul className=\"contact-list\">\n//         {contacts.map(({ name, number, id }) => (\n//           <li key={id} className={s.contact__item}>\n//             <p className={s.item}>{name}:</p>\n//             <p className={s.item}>{number}</p>\n//             <button\n//               key={id}\n//               type=\"button\"\n//               className={s.onClick__btn}\n//               onClick={() => deleteContact(id)}\n//             >\n//               Delete\n//             </button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// const mapStateToProps = state => {\n//   return {\n//     contacts: state.contacts,\n//   };\n// };\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     deleteContact: id => dispatch(removeContact(id)),\n//   };\n// };\n\n// ContactList.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//       id: PropTypes.string.isRequired,\n//     }),\n//   ),\n//   deleteContact: PropTypes.func.isRequired,\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import { useState, useEffect } from 'react';\nimport './App.css';\nimport ContactForm from '../ContactForm/ContactForm';\nimport Filter from '../Filter/Filter';\nimport ContactList from '../ContactList/ContactList';\nimport dataContacts from '../../fileJson/contacts.json';\nimport { useDispatch } from 'react-redux';\nimport { filterContacts } from '../../redux/contacts/actions';\nimport { addContact } from '../../redux/contacts/actions';\n\nexport default function App() {\n  const [contacts, setContacts] = useState(dataContacts);\n  const [filter, setFilter] = useState('');\n\n  //=====Redux=====//\n  const dispatch = useDispatch();\n\n  //=====Redux=====//\n\n  useEffect(() => {\n    const parsedContacts = JSON.parse(localStorage.getItem('contacts'));\n    if (parsedContacts) {\n      setContacts(parsedContacts);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const formSubmitHandler = data => {\n    const allReadyPresentContact = contacts.some(\n      elem => elem.name.toLowerCase() === data.name.toLowerCase(),\n    );\n\n    if (allReadyPresentContact) {\n      return alert(`${data.name} is already in contacts.`);\n    }\n\n    setContacts([...contacts, data]);\n  };\n\n  const handleFilterChange = e => {\n    // setFilter(e.target.value); // сетим локально\n    dispatch(filterContacts(e.target.value)); // отправляем значение в redux\n  };\n\n  const handleFilterContact = () => {\n    const filterContact = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterContact),\n    );\n  };\n\n  const delContact = id => {\n    setContacts(contacts.filter(contact => contact.id !== id));\n  };\n\n  return (\n    <div className=\"Container\">\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={formSubmitHandler} />\n      <h2>Contacts</h2>\n      <Filter filter={filter} onChange={handleFilterChange} />\n      <ContactList\n        contacts={handleFilterContact()}\n        deleteContact={delContact}\n      />\n    </div>\n  );\n}\n","import { createReducer } from '@reduxjs/toolkit';\nimport dataContacts from '../../fileJson/contacts.json';\nimport { addContact, removeContact, filterContacts } from './actions';\n\nconst initState = [{ id: '', dataContacts }];\n\n// const contactList = (state = initState, action) => {\n//   switch (action.type) {\n//     case 'contact/add':\n//       return [...state, action.payload];\n\n//     case 'contact/delete':\n//       return state.filter(contact => contact.id !== action.payload.id);\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const contactFilter = (state = '', { payload }) => {\n//   return payload;\n// };\n\nexport const contactList = createReducer(initState, {\n  [addContact]: (state, { payload }) => [...state, payload],\n  [removeContact]: (state, { payload }) =>\n    state.filter(contact => contact.id !== payload),\n});\n\nexport const contactFilter = createReducer('', {\n  [filterContacts]: (_, { payload }) => payload,\n});\n","// import { createStore } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\n// export const store = createStore(contactReducer, composeWithDevTools());\nimport { combineReducers } from 'redux';\nimport { contactList, contactFilter } from './contacts/reducers';\nimport { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\n\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nimport storage from 'redux-persist/lib/storage';\n\nconst persistConfig = {\n  key: 'contacts',\n  version: 1,\n  storage,\n  blacklist: ['filter'],\n};\n\nconst contactReducer = combineReducers({\n  contacts: contactList,\n  filter: contactFilter,\n});\nconst persistedContactReducer = persistReducer(persistConfig, contactReducer);\n\nexport const store = configureStore({\n  reducer: persistedContactReducer,\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }).concat(logger),\n});\n\nexport const persistor = persistStore(store);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n//импорт компонента Provider\nimport { Provider } from 'react-redux';\n//импорт глобального состояния\nimport { store, persistor } from './redux/store';\n//импорт компонента PersistGate\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PersistGate persistor={persistor} loading={null}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </PersistGate>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact__form\":\"ContactForm_contact__form__EsFOx\",\"input__number\":\"ContactForm_input__number__5vJmE\",\"input__name\":\"ContactForm_input__name__2ovuN\",\"input__title\":\"ContactForm_input__title__3lRHV\",\"btn__add\":\"ContactForm_btn__add__3rVy7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactList_item__1bT_E\"};"],"sourceRoot":""}