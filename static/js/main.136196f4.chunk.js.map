{"version":3,"sources":["components/Filter/Filter.module.css","redux/contacts/actions.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","components/App/App.js","redux/contacts/reducers.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css"],"names":["module","exports","addContact","createAction","removeContact","filterContacts","connect","dispatch","onnAdd","value","onSubmit","useState","name","setName","number","setNumber","useDispatch","handleChange","e","target","reset","className","s","contact__form","input__form","preventDefault","contact","id","uuidv4","input__title","type","pattern","title","required","input__name","onChange","input__number","btn__add","Filter","filter","filter__container","filter__title","filter__input","state","contactsList","contacts","onDelete","deleteContact","map","contact__item","item","onClick__btn","onClick","App","dataContacts","setContacts","setFilter","useEffect","parsedContacts","JSON","parse","localStorage","getItem","setItem","stringify","data","some","elem","toLowerCase","alert","filterContact","includes","handleFilterContact","initState","contactList","createReducer","payload","contactFilter","_","contactReducer","combineReducers","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.136196f4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter__container\":\"Filter_filter__container__1NJjO\",\"filter__input\":\"Filter_filter__input__20JXL\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const addContact = createAction('contact/add');\nexport const removeContact = createAction('contact/delete');\nexport const filterContacts = createAction('contact/filter');\n\n// export const addContact = contact => ({\n//   type: 'contact/add',\n//   payload: contact,\n// });\n\n// export const removeContact = id => ({\n//   type: 'contact/delete',\n//   payload: { id },\n// });\n\n// export const filterContacts = value => ({\n//   type: 'contact/filter',\n//   payload: value,\n// })\n","import { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport { addContact } from '../../redux/contacts/actions';\nimport s from './ContactForm.module.css';\n\nfunction ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n\n    onSubmit(contact);\n\n    // onAdd(contact); //диспатчим contact в redux\n    dispatch(addContact(contact));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div className={s.contact__form}>\n      <form className={s.input__form} onSubmit={handleSubmit}>\n        <label>\n          <span className={s.input__title}>Name</span>\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            className={s.input__name}\n            value={name}\n            onChange={handleChange}\n          />\n        </label>\n        <label>\n          <span className={s.input__title}>Number</span>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            className={s.input__number}\n            value={number}\n            onChange={handleChange}\n          />\n        </label>\n        <button type=\"submit\" className={s.btn__add}>\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.number,\n  handleChange: PropTypes.func,\n  handleSubmit: PropTypes.func,\n  nameInputId: PropTypes.string,\n  numberInputId: PropTypes.string,\n};\n\n// const mapStateToProps = state => {\n//   return {\n//     contactsList: state.contacts,\n//   };\n// };\nconst mapDispatchToProps = dispatch => {\n  return {\n    onnAdd: value => dispatch(addContact(value)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nconst Filter = ({ filter, onChange }) => {\n  return (\n    <div className={s.filter__container}>\n      <label className={s.filter__title}>\n        Find contacts by name\n        <input\n          className={s.filter__input}\n          type=\"text\"\n          value={filter}\n          name=\"name\"\n          onChange={onChange}\n        />\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { removeContact } from '../../redux/contacts/actions';\nimport s from './ContactList.module.css';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nconst ContactList = ({ contacts, deleteContact }) => {\n  return (\n    <div>\n      <ul className=\"contact-list\">\n        {contacts.map(({ name, number, id }) => (\n          <li key={id} className={s.contact__item}>\n            <p className={s.item}>{name}:</p>\n            <p className={s.item}>{number}</p>\n            <button\n              key={id}\n              type=\"button\"\n              className={s.onClick__btn}\n              onClick={() => deleteContact(id)}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    contactsList: state.contacts,\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    onDelete: contact => dispatch(removeContact(contact)),\n  };\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    }),\n  ),\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n// export default ContactList;\n","import { useState, useEffect } from 'react';\nimport './App.css';\nimport ContactForm from '../ContactForm/ContactForm';\nimport Filter from '../Filter/Filter';\nimport ContactList from '../ContactList/ContactList';\nimport dataContacts from '../../fileJson/contacts.json';\nimport { useDispatch } from 'react-redux';\nimport { filterContacts } from '../../redux/contacts/actions';\n\nexport default function App() {\n  const [contacts, setContacts] = useState(dataContacts);\n  const [filter, setFilter] = useState('');\n\n  //=====Redux=====//\n  const dispatch = useDispatch();\n\n  //=====Redux=====//\n\n  useEffect(() => {\n    const parsedContacts = JSON.parse(localStorage.getItem('contacts'));\n    if (parsedContacts) {\n      setContacts(parsedContacts);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const formSubmitHandler = data => {\n    const allReadyPresentContact = contacts.some(\n      elem => elem.name.toLowerCase() === data.name.toLowerCase(),\n      // dispatch(),\n    );\n\n    if (allReadyPresentContact) {\n      return alert(`${data.name} is already in contacts.`);\n    }\n\n    setContacts([...contacts, data]);\n  };\n\n  const handleFilterChange = e => {\n    setFilter(e.target.value); // сетим локально\n    dispatch(filterContacts(e.target.value)); // отправляем значение в redux\n  };\n\n  const handleFilterContact = () => {\n    const filterContact = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterContact),\n    );\n  };\n\n  const delContact = id => {\n    setContacts(contacts.filter(contact => contact.id !== id));\n  };\n\n  return (\n    <div className=\"Container\">\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={formSubmitHandler} />\n      <h2>Contacts</h2>\n      <Filter filter={filter} onChange={handleFilterChange} />\n      <ContactList\n        contacts={handleFilterContact()}\n        deleteContact={delContact}\n      />\n    </div>\n  );\n}\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport dataContacts from '../../fileJson/contacts.json';\n\nconst initState = [{ id: '', dataContacts }];\n\n// const contactList = (state = initState, action) => {\n//   switch (action.type) {\n//     case 'contact/add':\n//       return [...state, action.payload];\n\n//     case 'contact/delete':\n//       return state.filter(contact => contact.id !== action.payload.id);\n\n//     default:\n//       return state;\n//   }\n// };\n\nconst contactList = createReducer(initState, {\n  'contact/add': (state, { payload }) => [...state, payload],\n  'contact/delete': (state, { payload }) =>\n    state.filter(contact => contact.id !== payload.id),\n});\n\n// const contactFilter = (state = '', { payload }) => {\n//   return payload;\n// };\n\nconst contactFilter = createReducer('', {\n  'contact/filter': (_, { payload }) => payload,\n});\n\nexport const contactReducer = combineReducers({\n  contacts: contactList,\n  filter: contactFilter,\n});\n","// import { createStore } from 'redux';\nimport { contactReducer } from './contacts/reducers';\n\n// import { composeWithDevTools } from 'redux-devtools-extension';\n// export const store = createStore(contactReducer, composeWithDevTools());\n\nimport { configureStore } from '@reduxjs/toolkit';\n\nexport const store = configureStore({\n  reducer: contactReducer,\n});\n\n// You can use subscribe() to update the UI in response to state changes.\n// Normally you'd use a view binding library (e.g. React Redux) rather than subscribe() directly.\n// There may be additional use cases where it's helpful to subscribe as well.\n\n// store.subscribe(() => console.log(store.getState()));\n\n// // The only way to mutate the internal state is to dispatch an action.\n// // The actions can be serialized, logged or stored and later replayed.\n// store.dispatch({ type: 'counter/incremented' });\n// // {value: 1}\n// store.dispatch({ type: 'counter/incremented' });\n// // {value: 2}\n// store.dispatch({ type: 'counter/decremented' });\n// // {value: 1}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './components/App/App';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact__form\":\"ContactForm_contact__form__EsFOx\",\"input__number\":\"ContactForm_input__number__5vJmE\",\"input__name\":\"ContactForm_input__name__2ovuN\",\"input__title\":\"ContactForm_input__title__3lRHV\",\"btn__add\":\"ContactForm_btn__add__3rVy7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactList_item__1bT_E\"};"],"sourceRoot":""}